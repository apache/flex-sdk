<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark">
	
	<fx:Metadata>
		[HostComponent("spark.components.CallOut")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.core.mx_internal;
			
			import spark.components.ArrowDirection;
			
			public static const ARROW_SIDE_LENGHT:int = 24;
			
			public static const RADIUS:int = 5;
			
			public static const CONTENT_GAP:int = 10;
			
        private static const BORDER_THICKNESS:int = 2;

			use namespace mx_internal;
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				updateArrow(unscaledWidth, unscaledHeight);
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updateArrow(uw:Number, uh:Number):void
			{
				var arDi:String = hostComponent.arrowDirection;
				var aHP:String	= hostComponent.mx_internal::actualHorizontalPosition;
				var aVP:String	= hostComponent.mx_internal::actualVerticalPosition;
				
				if(arDi != ArrowDirection.NONE)
				{
					if(arDi == "left")
					{
						arrowGraphic.height	= ARROW_SIDE_LENGHT;
						arrowGraphic.width	= ARROW_SIDE_LENGHT/2;

						arrowPath.data		= "M " + ARROW_SIDE_LENGHT/2 + " 0 L " + ARROW_SIDE_LENGHT/2 + " " + ARROW_SIDE_LENGHT + " L 0 " + ARROW_SIDE_LENGHT/2 + " Z";
						
                    backgroundGroup.left = arrowGraphic.width - BORDER_THICKNESS;
						backgroundGroup.right	= arrowGraphic.width * -1;

                    	contentGroup.left = CONTENT_GAP + arrowGraphic.width - BORDER_THICKNESS;
						contentGroup.right	= CONTENT_GAP - arrowGraphic.width;

                    	coverRect.top = coverRect.bottom = BORDER_THICKNESS + 1;
                    	coverRect.width = BORDER_THICKNESS;
                    	coverRect.right = 0;
						arrowGraphic.left	= 0;
					}
					else if(arDi == "right")
					{
						arrowGraphic.height	= ARROW_SIDE_LENGHT;
						arrowGraphic.width	= ARROW_SIDE_LENGHT/2;
						
						arrowPath.data		= "M 0 0 L " + ARROW_SIDE_LENGHT/2 + " " + ARROW_SIDE_LENGHT/2 + " L 0 " + ARROW_SIDE_LENGHT + " Z";
						
						backgroundGroup.left	= arrowGraphic.width * -1;
                    	backgroundGroup.right = arrowGraphic.width - BORDER_THICKNESS ;

						contentGroup.left	= CONTENT_GAP - arrowGraphic.width;
                    	contentGroup.right = CONTENT_GAP + arrowGraphic.width- BORDER_THICKNESS ;

                    	coverRect.top = coverRect.bottom = BORDER_THICKNESS + 1;
                    	coverRect.width = BORDER_THICKNESS;
                    	coverRect.left = 0;

						arrowGraphic.right	= 0;
					}
					else if(arDi == "up")
					{
						arrowGraphic.height	= ARROW_SIDE_LENGHT/2;
						arrowGraphic.width	= ARROW_SIDE_LENGHT;
						

						arrowPath.data		= "M 0 " + ARROW_SIDE_LENGHT/2 + " L " + ARROW_SIDE_LENGHT + " " + ARROW_SIDE_LENGHT/2 + " L " + ARROW_SIDE_LENGHT/2 + " 0 Z";
						
                    	backgroundGroup.top = arrowGraphic.height - BORDER_THICKNESS;
						backgroundGroup.bottom	= arrowGraphic.height * -1;
						
                    	contentGroup.top = CONTENT_GAP + arrowGraphic.height - BORDER_THICKNESS;
						contentGroup.bottom	= CONTENT_GAP - arrowGraphic.height;

                    	coverRect.left = coverRect.right = BORDER_THICKNESS + 1;
                    	coverRect.height = BORDER_THICKNESS;
                    	coverRect.bottom = 0;

						arrowGraphic.top	= 0;

					}
					else if(arDi == "down")
					{
						arrowGraphic.height	= ARROW_SIDE_LENGHT/2;
						arrowGraphic.width	= ARROW_SIDE_LENGHT;
						
						arrowPath.data		= "M 0 0 L " + ARROW_SIDE_LENGHT/2 + " " + ARROW_SIDE_LENGHT/2 + " L " + ARROW_SIDE_LENGHT + " 0 Z";
						
						backgroundGroup.top		= arrowGraphic.height * -1;
                    	backgroundGroup.bottom = arrowGraphic.height + BORDER_THICKNESS + 1;

						contentGroup.top	= CONTENT_GAP - arrowGraphic.height;
                    	contentGroup.bottom = CONTENT_GAP + arrowGraphic.height + BORDER_THICKNESS + 1;

                    	coverRect.left = coverRect.right = BORDER_THICKNESS + 1;
                    	coverRect.height = BORDER_THICKNESS;
                    	coverRect.top = 0;
						arrowGraphic.bottom	= 0;

					}
					
					if(arDi == "up" ||Â arDi == "down")
					{
						if(aHP == "start")
						{
							arrowGraphic.left	= RADIUS;
						}
						else if(aHP == "middle")
						{
							arrowGraphic.horizontalCenter = 0;
						}
						else if(aHP == "end")
						{
							arrowGraphic.right = RADIUS;
						}
					}
					else if(arDi == "left" || arDi == "right")
					{
						if(aVP == "start")
						{
							arrowGraphic.top	= RADIUS;
						}
						else if(aVP == "middle")
						{
							arrowGraphic.verticalCenter = 0;
						}
						if(aVP == "end")
						{
							arrowGraphic.bottom = RADIUS;
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="closed" stateGroups="closedGroup"/>
		<s:State name="disabledAndClosed" stateGroups="closedGroup"/>
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="closed" toState="normal" autoReverse="true">
			<s:Fade duration="150" target="{chrome}"/>
		</s:Transition>
		
		<s:Transition fromState="disabledAndClosed" toState="disabled" autoReverse="true">
			<s:Fade duration="150" target="{chrome}"/>
		</s:Transition>
		
		<s:Transition fromState="normal" toState="closed" autoReverse="true">
			<s:Fade duration="150" target="{chrome}"/>
		</s:Transition>
		
		<s:Transition fromState="disabled" toState="disabledAndClosed" autoReverse="true">
			<s:Fade duration="150" target="{chrome}"/>
		</s:Transition>
	</s:transitions>
	
	<s:Group id="chrome" left="0" right="0" top="0" bottom="0" visible.closedGroup="false">
		<s:Group id="backgroundGroup" left="0" right="0" top="0" bottom="0">
			
			<s:Rect left="0" right="0" top="0" bottom="0" radiusX="{RADIUS}" radiusY="{RADIUS}">
				<s:stroke>
					<s:SolidColorStroke weight="2" color="0x000000"/>
					<!--
					<s:LinearGradientStroke weight="1"/>
					-->
				</s:stroke>
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>
				<s:filters>
					<s:DropShadowFilter id="shadow" blurX="7" blurY="7" alpha="0.4" distance="5" angle="90" knockout="false"/>
				</s:filters>
			</s:Rect>
		</s:Group>
		
		<s:Group id="contentGroup" left="{CONTENT_GAP}" right="{CONTENT_GAP}" top="{CONTENT_GAP}" bottom="{CONTENT_GAP}" minWidth="0" minHeight="0" fontSize="12"/>
		
		<s:Graphic id="arrowGraphic" x="0" y="0">
			<s:Path id="arrowPath" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:SolidColor color="0x000000"/>
				</s:fill>
			</s:Path>
            <s:Rect id="coverRect" >
                <s:fill>
                    <s:SolidColor color="0xFFFFFF"/>
                </s:fill>
            </s:Rect>
		</s:Graphic>
	</s:Group>
</s:SparkSkin>